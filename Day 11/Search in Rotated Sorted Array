int binarySearch(vector<int>& arr, int l, int r, int x) {
        if (r >= l) {
            int mid = l + (r - l) / 2;
            if (arr[mid] == x)
                return mid;
            if (arr[mid] > x)
                return binarySearch(arr, l, mid - 1, x);
            return binarySearch(arr, mid + 1, r, x);
        }
        return -1;
    }

    int search(vector<int>& nums, int target) {
        if(nums.size() == 1 && nums[0] == target) return 0;
        if(nums.size() == 1 && nums[0] != target) return -1;
       int low = 0;
       int high = nums.size() - 1;
       while(low<high){
            int mid = low + (high-low)/2;
            if(nums[mid] > nums[high]) low = mid +1;
            else high = mid;
       }

        if(high>0){
            if(target >= nums[0]) return binarySearch(nums,0,high-1,target);
            else return binarySearch(nums,high,nums.size()-1,target);
        }
        else return binarySearch(nums,0,nums.size()-1,target);
    }