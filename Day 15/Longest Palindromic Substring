 string longestPalindrome(string s) 
    {
        int i=0;
        int n= s.length();
        int maxi=0;
        //indexes of final ans
        int start=0,end=0;
        
        while(i<n)
        {
            int left=i, right=i;
            
            //duplicates on left on i
            while(left>0 && s[left]==s[left-1])
            left--;
                    
            //duplicates on right of i
            while(right<n-1 && s[right]==s[right+1])
            right++;
            
            //updating i
            if(right>i) 
            i= right+1;
            
            else i++;
            
            //checking palindrome on the outsides of duplicate's end indexes
            while(left>0 && right<n-1 && s[left-1]==s[right+1])
            {
                left--;
                right++;
            }
            
            //updating max 
            if(right-left > maxi)
            {
                start= left;
                end= right;
                maxi= end-start;
            }
        }
        
        return s.substr(start,end-start+1);
    }
};