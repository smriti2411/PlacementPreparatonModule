int widthOfBinaryTree(TreeNode* root) {
        
        if(root == NULL)
        {
            return 0;
        }
        
        long long int ans = 0;
        queue<pair<TreeNode *, int>> q;
        
        q.push({root,0});
        
        while(!q.empty())
        {
            //Take the minimum index which is ofc present at the front of queue 
            auto minimum = q.front().second;
            long long int first; 
            long long int last; 
            int size = q.size();
            
            for(int i = 0; i<size; i++)
            {
                long long int curr_id = q.front().second - minimum; 
                auto node = q.front().first;
                q.pop();
                
                if(i==0)
                    first = curr_id;
                if(i==size-1)
                    last = curr_id;
                
                if(node->left){
                    q.push({node->left,curr_id*2+1});
                }
                
                if(node->right){
                    q.push({node->right,curr_id*2+2});
                }
                
            }
            ans = max(ans, last-first+1);
        }
        return ans;
    }